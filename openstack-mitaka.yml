- hosts: all
  user: root
  tasks:
    - copy: src=/etc/hosts dest=/etc/hosts
    - copy: src=/etc/selinux/config dest=/etc/selinux/config

- hosts: openstack-mitaka
  user: root
  tasks:
    - name: copy confg_ext.sh 
      copy: src=/root/conf_ext.sh dest=/root/conf_ext.sh mode=755

    - name: install open-vm-tools
      yum: name=open-vm-tools state=present

    - name: install wget
      yum: name=wget state=present

    - name: stop and disable firewalld
      service: name=firewalld state=stopped enabled=no

    - name: install chrony
      yum: name=chrony state=present

- hosts: openstack-mitaka-compute, openstack-mitaka-block, openstack-mitaka-network
  user: root
  tasks:
    - name: copy chrony.conf
      copy: src=/etc/chrony.conf dest=/etc/chrony.conf

- hosts: openstack-mitaka
  user: root
  tasks:  
    - name: start and enable chronyd
      service: name=chronyd state=started enabled=yes

    - name: install openstack packages
      yum: name=centos-release-openstack-mitaka state=present

    - name: upgrade all packages
      yum: name=* state=latest
      notify: reboot os

    - name: install openstack client
      yum: name=python-openstackclient state=present

    - name: install openstack-selinux
      yum: name=openstack-selinux state=present

    - name: install openstack-utils
      yum: name=openstack-utils state=present

  handlers:
    - name: reboot os
      shell: sleep 2 && shutdown -r now "Ansible triggered"
      async: 1
      poll: 0
      ignore_errors: truea
      notify: waiting for server startup

    - name: waiting for server startup
      local_action: wait_for host={{ inventory_hostname }} state=started delay=30 timeout=300

- hosts: openstack-mitaka-controller
  user: root
  tasks:
    - name: install mariadb
      yum: name={{ item }} state=present
      with_items:
        - mariadb
        - mariadb-server
        - python2-PyMySQL

    - name: create conf file
      file: path=/etc/my.cnf.d/openstack.cnf state=touch

    - name: config conf file
      shell: |
        openstack-config --set /etc/my.cnf.d/openstack.cnf mysqld bind-address 0.0.0.0
        openstack-config --set /etc/my.cnf.d/openstack.cnf mysqld default-storage-engine innodb
        openstack-config --set /etc/my.cnf.d/openstack.cnf mysqld innodb_file_per_table ""
        openstack-config --set /etc/my.cnf.d/openstack.cnf mysqld collation-server utf8_general_ci
        openstack-config --set /etc/my.cnf.d/openstack.cnf mysqld character-set-server utf8

    - name: start and enable mariadb
      service: name=mariadb state=started enabled=yes

    - name: install mongodb for ceilometer
      yum: name={{ item }} state=present
      with_items:
        - mongodb-server
        - mongodb

    - name: config mongod.conf
      shell: |
        openstack-config --set /etc/mongod.conf "" bind_ip {{ ansible_eno16777984.ipv4.address }}
        openstack-config --set /etc/mongod.conf "" smallfiles true
   
    - name: start and enable mongodb
      service: name=mongod state=started enabled=yes

    - name: install rabbitmq
      yum: name=rabbitmq-server state=present
   
    - name: start and enable rabbitmq
      service: name=rabbitmq-server state=started enabled=yes

    - name: config rabbitmq
      command: rabbitmqctl add_user openstack password
      ignore_errors: true

    - name: config rabbitmq
      command: rabbitmqctl set_permissions openstack ".*" ".*" ".*"

    - name: install memcached
      yum: name={{ item }} state=present
      with_items:
        - memcached
        - python-memcached

    - name: start and enable memcached
      service: name=memcached state=started enabled=yes

- hosts: openstack-mitaka-controller
  name: keystone installation and configuration
  user: root
  environment:
    OS_TOKEN: 1234567890abc
    OS_URL: http://{{ inventory_hostname }}:35357/v3
    OS_IDENTITY_API_VERSION: 3
  tasks:
    - name: install mysql python module for ansible execution (mysql_db)
      yum: name=MySQL-python state=present

    - name: create keystone db, copy sql file
      copy: src=/root/work/template/keystone.sql dest=/tmp/keystone.sql mode=755

    - name: create keystone db
      mysql_db: name=keystone state=present

    - name: execute sql for keystone db
      mysql_db: name=keystone state=import target=/tmp/keystone.sql

    - name: install keystone package (openstack-keystone)
      yum: name=openstack-keystone state=present

    - name: install keystone package (httpd)
      yum: name=httpd state=present
 
    - name: install keystone package (mod_wsgi)
      yum: name=mod_wsgi state=present

    - name: config keystone.conf
      shell: |
        openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token 1234567890abc
        openstack-config --set /etc/keystone/keystone.conf database connection mysql+pymysql://keystone:password@localhost/keystone
        openstack-config --set /etc/keystone/keystone.conf token provider fernet
 
    - name: execute to populate database
      become: yes
      become_user: keystone
      command: keystone-manage db_sync

    - name: initialize fernet keys
      command: keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone

    - name: configure httpd.conf
      lineinfile: >-
        dest='/etc/httpd/conf/httpd.conf'
        state=present
        backrefs=yes
        regexp='{{ item.regexp }}'
        line='{{ item.line }}'
      with_items:
      - regexp: '^#?\s*ServerName'
        line: 'ServerName mo-controller'

    - name: copy wsgi-keystone.conf
      copy: src=/root/work/template/wsgi-keystone.conf dest=/etc/httpd/conf.d/wsgi-keystone.conf

    - name: start and enable httpd
      service: name=httpd state=started enabled=yes 

    - name: check identity service is registered or not
      shell: openstack service list | grep identity | awk '{print $6}'
      register: openstack_service_list_identity
      ignore_errors: true

    - name: execute openstack service create identity
      shell: openstack service create --name keystone --description "OpenStack Identity" identity
      when: openstack_service_list_identity.stdout_lines.count("identity") < 1

    - name: check identity public endpoint exists or not
      shell: openstack endpoint list | grep identity | awk '{print $12}'
      register: openstack_endpoint_list_identity
      ignore_errors: true

    - name: execute openstack endpoint create identity public
      shell: openstack endpoint create --region RegionOne identity public http://{{ inventory_hostname }}:5000/v3
      when: openstack_endpoint_list_identity.stdout_lines.count("public") < 1

    - name: execute openstack endpoint create identity internal
      shell: openstack endpoint create --region RegionOne identity internal http://{{ inventory_hostname }}:5000/v3
      when: openstack_endpoint_list_identity.stdout_lines.count("internal") < 1

    - name: execute openstack endpoint create identity admin
      shell: openstack endpoint create --region RegionOne identity admin http://{{ inventory_hostname }}:35357/v3
      when: openstack_endpoint_list_identity.stdout_lines.count("admin") < 1
 
    - name: check default domain exists or not
      shell: openstack domain list | grep default | awk '{print $4}'
      register: openstack_domain_list
      ignore_errors: true

    - name: create default domain
      shell: openstack domain create --description "Default Domain" default
      when: openstack_domain_list.stdout_lines.count("default") < 1

    - name: check admin project exists or not
      shell: openstack project list | grep admin | awk '{print $4}'
      register: openstack_project_list
      ignore_errors: true

    - name: create admin project
      shell: openstack project create --domain default --description "Admin Project" admin
      when: openstack_project_list.stdout_lines.count("admin") < 1

    - name: check admin user exists or not
      shell: openstack user list | grep admin | awk '{print $4}'
      register: openstack_user_list
      ignore_errors: true

    - name: create admin user
      shell: openstack user create --domain default admin --password password
      when: openstack_user_list.stdout_lines.count("admin") < 1

    - name: check admin role exists or not
      shell: openstack role list | grep admin | awk '{print $4}'
      register: openstck_role_list
      ignore_errors: true

    - name: create admin role
      shell: openstack role create admin
      when: openstck_role_list.stdout_lines.count("admin") < 1

    - name: add admin role to the admin project and user
      shell: openstack role add --project admin --user admin admin

    - name: check service project exists or not
      shell: openstack project list | grep service | awk '{print $4}'
      register: openstack_project_list
      ignore_errors: true
    
    - name: create service project
      shell: openstack project create --domain default --description "Service Project" service
      when: openstack_project_list.stdout_lines.count("service") < 1

    - name: check demo project exists or not
      shell: openstack project list | grep demo | awk '{print $4}'
      register: openstack_project_list
      ignore_errors: true

    - name: create demo project
      shell: openstack project create --domain default --description "Demo Project" demo
      when: openstack_project_list.stdout_lines.count("demo") < 1

    - name: check demo user exists or not
      shell: openstack user list | grep demo | awk '{print $4}'
      register: openstack_user_list
      ignore_errors: true

    - name: create demo user
      shell: openstack user create --domain default demo --password password
      when: openstack_user_list.stdout_lines.count("demo") < 1

    - name: check user role exists or not
      shell: openstack role list | grep user | awk '{print $4}'
      register: openstack_role_list
      ignore_errors: true

    - name: create user role
      shell: openstack role create user
      when: openstack_role_list.stdout_lines.count("user") < 1

    - name: add user role to the demo project and user
      shell: openstack role add --project demo --user demo user

    - name: create openstack environment script for admin
      template: src=/root/work/template/admin-openrc.j2 dest=/root/admin-openrc owner=root group=root mode=0755

    - name: create openstack environment script for demo
      template: src=/root/work/template/demo-openrc.j2 dest=/root/demo-openrc owner=root group=root mode=0755

  handlers:
    - name: restart httpd service
      service: name=httpd state=restarted

- hosts: openstack-mitaka-controller
  name: glance installation and configuration
  user: root
  tasks:
    - name: create glance db
      mysql_db: name=glance state=present

    - name: create glance db, copy sql file
      copy: src=/root/work/template/glance.sql dest=/tmp/glance.sql mode=755

    - name: execute sql for glance db
      mysql_db: name=glance state=import target=/tmp/glance.sql

    - name: check glance user exists or not
      shell: . /root/admin-openrc && openstack user list | grep glance | awk '{print $4}'
      register: openstack_user_list
      ignore_errors: true

    - name: create glance user
      shell: . /root/admin-openrc && openstack user create --domain default glance --password password
      when: openstack_user_list.stdout_lines.count("glance") < 1

    - name: add admin role to the glance user and service project
      shell: . /root/admin-openrc && openstack role add --project service --user glance admin

    - name: check image service is registered or not
      shell: . /root/admin-openrc && openstack service list | grep glance | awk '{print $6}'
      register: openstack_service_list
      ignore_errors: true

    - name: create image service
      shell: . /root/admin-openrc && openstack service create --name glance --description "OpenStack Image Service" image
      when: openstack_service_list.stdout_lines.count("image") < 1

    - name: check image public endpoint extsts or not
      shell: . /root/admin-openrc && openstack endpoint list | grep image | awk '{print $12}'
      register: openstack_endpoint_list
      ignore_errors: true

    - name: execute openstack endpoint create image public
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne image public http://{{ inventory_hostname }}:9292
      when: openstack_endpoint_list.stdout_lines.count("public") < 1

    - name: execute openstack endpoint create image internal
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne image internal http://{{ inventory_hostname }}:9292
      when: openstack_endpoint_list.stdout_lines.count("internal") < 1

    - name: execute openstack endpoint create image admin
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne image admin http://{{ inventory_hostname }}:9292
      when: openstack_endpoint_list.stdout_lines.count("admin") < 1

    - name: install openstack-glance pakcage
      yum: name=openstack-glance state=present

    - name: config glance-api.conf
      shell: |
        openstack-config --set /etc/glance/glance-api.conf database connection mysql+pymysql://glance:password@localhost/glance
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_uri http://{{ inventory_hostname }}:5000
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_url http://{{ inventory_hostname }}:35357
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken memcached_servers {{ inventory_hostname }}:11211
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken auth_type password
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken project_name service
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken username glance
        openstack-config --set /etc/glance/glance-api.conf keystone_authtoken password password
        openstack-config --set /etc/glance/glance-api.conf paste_deploy flavor keystone
        openstack-config --set /etc/glance/glance-api.conf glance_store stores file,http
        openstack-config --set /etc/glance/glance-api.conf glance_store default_store file
        openstack-config --set /etc/glance/glance-api.conf glance_store filesystem_store_datadir /var/lib/glance/images/
      notify: restart openstack-glance-api

    - name: config glance-registry.conf
      shell: |        
        openstack-config --set /etc/glance/glance-registry.conf database connection mysql+pymysql://glance:password@localhost/glance
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_uri http://{{ inventory_hostname }}:5000
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_url http://{{ inventory_hostname }}:35357
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken memcached_servers {{ inventory_hostname }}:11211
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken auth_type password
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken project_name service
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken username glance
        openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken password password
        openstack-config --set /etc/glance/glance-registry.conf paste_deploy flavor keystone
      notify: restart openstack-glance-api

    - name: populate the image service database
      become: yes
      become_user: glance
      command: glance-manage db_sync    

    - name: start and enable openstack-glance-api service
      service: name=openstack-glance-api state=started enabled=yes    
  
  handlers:
    - name: restart openstack-glance-api
      service: name=openstack-glance-api state=restarted

- hosts: openstack-mitaka-controller
  user: root
  tasks:
    - name: check cirros image file
      command: test -e cirros-0.3.4-x86_64-disk.img
      register: result
      ignore_errors: true
   
    - name: wget cirros image file
      command: wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
      when: result | failed

    - name: check if cirros image is registered or not
      shell: . /root/admin-openrc && openstack image list | grep cirros | awk '{print $4}'
      register: openstack_image_list
      ignore_errors: true

    - name: register cirros image to glance
      shell: . /root/admin-openrc && openstack image create "cirros" --file cirros-0.3.4-x86_64-disk.img --disk-format qcow2 --container-format bare --public
      when: openstack_image_list.stdout_lines.count("cirros") < 1

- hosts: openstack-mitaka-controller
  name: nova installation and configuration on controller node
  user: root
  tasks:
    - name: create nova db
      mysql_db: name={{ item }} state=present
      with_items:
        - nova
        - nova_api

    - name: create nova db, copy sql file
      copy: src=/root/work/template/{{ item }} dest=/tmp/{{ item }} mode=755
      with_items:
        - nova.sql
        - nova_api.sql

    - name: execute sql for nova db
      mysql_db: name={{ item }} state=import target=/tmp/{{ item }}.sql
      with_items:
        - nova
        - nova_api

    - name: check if nova user exists or not
      shell: . /root/admin-openrc && openstack user list | grep nova | awk '{print $4}'
      register: openstack_user_list
      ignore_errors: true

    - name: create nova user
      shell: . /root/admin-openrc && openstack user create --domain default nova --password password
      when: openstack_user_list.stdout_lines.count("nova") < 1

    - name: add admin role to the nova user and service project
      shell: . /root/admin-openrc && openstack role add --project service --user nova admin

    - name: check compute service is registered or not
      shell: . /root/admin-openrc && openstack service list | grep nova | awk '{print $6}'
      register: openstack_service_list
      ignore_errors: true

    - name: create compute service
      shell: . /root/admin-openrc && openstack service create --name nova --description "OpenStack Compute" compute
      when: openstack_service_list.stdout_lines.count("compute") < 1

    - name: check compute endpoint extsts or not
      shell: . /root/admin-openrc && openstack endpoint list | grep compute | awk '{print $12}'
      register: openstack_endpoint_list
      ignore_errors: true

    - name: execute openstack endpoint create compute public
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne compute public http://{{ inventory_hostname }}:8774/v2.1/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("public") < 1

    - name: execute openstack endpoint create compute internal
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne compute internal http://{{ inventory_hostname }}:8774/v2.1/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("internal") < 1

    - name: execute openstack endpoint create compute admin
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne compute admin http://{{ inventory_hostname }}:8774/v2.1/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("admin") < 1

    - name: install openstack-nova packages
      yum: name={{ item }} state=present
      with_items:
        - openstack-nova-api
        - openstack-nova-cert
        - openstack-nova-conductor
        - openstack-nova-console
        - openstack-nova-novncproxy
        - openstack-nova-scheduler

    - name: config nova.conf
      shell: |
        openstack-config --set /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata
        openstack-config --set /etc/nova/nova.conf api_database connection mysql+pymysql://nova:password@localhost/nova_api
        openstack-config --set /etc/nova/nova.conf database connection mysql+pymysql://nova:password@localhost/nova
        openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend rabbit
        openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_host {{ inventory_hostname }}
        openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
        openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://{{ inventory_hostname }}:5000
        openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_url http://{{ inventory_hostname }}:35357
        openstack-config --set /etc/nova/nova.conf keystone_authtoken memcached_servers {{ inventory_hostname }}:11211
        openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_type password
        openstack-config --set /etc/nova/nova.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/nova/nova.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/nova/nova.conf keystone_authtoken project_name service
        openstack-config --set /etc/nova/nova.conf keystone_authtoken username nova
        openstack-config --set /etc/nova/nova.conf keystone_authtoken password password
        openstack-config --set /etc/nova/nova.conf DEFAULT my_ip {{ ansible_eno16777984.ipv4.address }}       
        openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True
        openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
        openstack-config --set /etc/nova/nova.conf vnc vncserver_listen \$my_ip
        openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address \$my_ip
        openstack-config --set /etc/nova/nova.conf glance api_servers http://{{ inventory_hostname }}:9292
        openstack-config --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
      notify: restart openstack-nova services

    - name: populate the compute databases
      become: yes
      become_user: nova
      command: nova-manage {{ item }} sync
      with_items:
        - api_db
        - db
    
    - name: start and enable openstack nova services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - openstack-nova-api
        - openstack-nova-cert
        - openstack-nova-consoleauth
        - openstack-nova-scheduler
        - openstack-nova-conductor
        - openstack-nova-novncproxy

  handlers:
    - name: restart openstack-nova services
      service: name={{ item }} state=restarted
      with_items:
        - openstack-nova-api
        - openstack-nova-cert
        - openstack-nova-consoleauth
        - openstack-nova-scheduler
        - openstack-nova-conductor
        - openstack-nova-novncproxy

- hosts: openstack-mitaka-compute
  name: nova installtion and configuration on compute node
  user: root
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: install opnestack-nova-compute package
      yum: name=openstack-nova-compute state=present

    - name: config nova.conf
      shell: |
        openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend rabbit
        openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_host {{ controller_hostname }}
        openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/nova/nova.conf oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
        openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://{{ controller_hostname }}:5000
        openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/nova/nova.conf keystone_authtoken memcached_servers {{ controller_hostname }}:11211
        openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_type password
        openstack-config --set /etc/nova/nova.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/nova/nova.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/nova/nova.conf keystone_authtoken project_name service
        openstack-config --set /etc/nova/nova.conf keystone_authtoken username nova
        openstack-config --set /etc/nova/nova.conf keystone_authtoken password password
        openstack-config --set /etc/nova/nova.conf DEFAULT my_ip {{ ansible_eno16777984.ipv4.address }}
        openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True
        openstack-config --set /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
        openstack-config --set /etc/nova/nova.conf vnc enabled True
        openstack-config --set /etc/nova/nova.conf vnc vncserver_listen 0.0.0.0
        openstack-config --set /etc/nova/nova.conf vnc vncserver_proxyclient_address \$my_ip
        openstack-config --set /etc/nova/nova.conf vnc novncproxy_base_url http://{{ controller_hostname }}:6080/vnc_auto.html
        openstack-config --set /etc/nova/nova.conf glance api_servers http://{{ controller_hostname }}:9292
        openstack-config --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
      notify: restart openstack nova service

    - name: start and enable libvirtd
      service: name=libvirtd state=started enabled=yes

    - name: start and enable openstack-nova-compute
      service: name=openstack-nova-compute state=started enabled=yes

  handlers:
    - name: restart openstack nova service
      service: name=openstack-nova-compute state=restarted

- hosts: openstack-mitaka-controller
  name: neutron installation and configuration on controller node
  user: root
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: create neutron db
      mysql_db: name=neutron state=present

    - name: copy sql file
      copy: src=/root/work/template/neutron.sql dest=/tmp/neutron.sql mode=755

    - name: execute sql for neutron db
      mysql_db: name=neutron state=import target=/tmp/neutron.sql

    - name: check if neutron user exists or not
      shell: . /root/admin-openrc && openstack user list | grep neutron | awk '{print $4}'
      register: openstack_user_list
      ignore_errors: true

    - name: create neutron user
      shell: . /root/admin-openrc && openstack user create --domain default neutron --password password
      when: openstack_user_list.stdout_lines.count("neutron") < 1    

    - name: add admin role to the neutron user and service project
      shell: . /root/admin-openrc && openstack role add --project service --user neutron admin

    - name: check network service is registered or not
      shell: . /root/admin-openrc && openstack service list | grep neutron | awk '{print $6}'
      register: openstack_service_list
      ignore_errors: true

    - name: create network service
      shell: . /root/admin-openrc && openstack service create --name neutron --description "OpenStack Networking" network
      when: openstack_service_list.stdout_lines.count("network") < 1
 
    - name: check network endpoint extsts or not
      shell: . /root/admin-openrc && openstack endpoint list | grep network | awk '{print $12}'
      register: openstack_endpoint_list
      ignore_errors: true

    - name: execute openstack endpoint create network public
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne network public http://{{ inventory_hostname }}:9696
      when: openstack_endpoint_list.stdout_lines.count("public") < 1

    - name: execute openstack endpoint create network internal
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne network internal http://{{ inventory_hostname }}:9696
      when: openstack_endpoint_list.stdout_lines.count("internal") < 1

    - name: execute openstack endpoint create network admin
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne network admin http://{{ inventory_hostname }}:9696
      when: openstack_endpoint_list.stdout_lines.count("admin") < 1 

    - name: install neutron packages
      yum: name={{ item }} state=present
      with_items:
        - openstack-neutron
        - openstack-neutron-ml2

    - name: config neutron.conf
      shell: |
        openstack-config --set /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:password@localhost/neutron
        openstack-config --set /etc/neutron/neutron.conf DEFAULT core_plugin ml2
        openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router
        openstack-config --set /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips True
        openstack-config --set /etc/neutron/neutron.conf DEFAULT rpc_backend rabbit
        openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_host {{ inventory_hostname }}
        openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_uri http://{{ inventory_hostname }}:5000
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_url http://{{ inventory_hostname }}:35357
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers {{ inventory_hostname }}:11211
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_type password
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_name service
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken username neutron
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken password password
        openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes True
        openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes True
        openstack-config --set /etc/neutron/neutron.conf nova auth_url http://{{ inventory_hostname }}:35357
        openstack-config --set /etc/neutron/neutron.conf nova auth_type password
        openstack-config --set /etc/neutron/neutron.conf nova project_domain_name default
        openstack-config --set /etc/neutron/neutron.conf nova user_domain_name default
        openstack-config --set /etc/neutron/neutron.conf nova region_name RegionOne
        openstack-config --set /etc/neutron/neutron.conf nova project_name service
        openstack-config --set /etc/neutron/neutron.conf nova username nova
        openstack-config --set /etc/neutron/neutron.conf nova password password
        openstack-config --set /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp
      notify: restart neutron service


    - name: config ml2_conf.ini
      shell: |
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan,vxlan
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types vxlan
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers linuxbridge,l2population
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vxlan vni_ranges 1:1000
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset True
      notify: restart neutron service


    - name: config nova.conf to use neutron
      shell: |
        openstack-config --set /etc/nova/nova.conf neutron url  http://{{ controller_hostname }}:9696
        openstack-config --set /etc/nova/nova.conf neutron auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/nova/nova.conf neutron auth_type password
        openstack-config --set /etc/nova/nova.conf neutron project_domain_name default
        openstack-config --set /etc/nova/nova.conf neutron user_domain_name default
        openstack-config --set /etc/nova/nova.conf neutron region_name RegionOne
        openstack-config --set /etc/nova/nova.conf neutron project_name service
        openstack-config --set /etc/nova/nova.conf neutron username neutron
        openstack-config --set /etc/nova/nova.conf neutron password password
        openstack-config --set /etc/nova/nova.conf neutron service_metadata_proxy True
        openstack-config --set /etc/nova/nova.conf neutron metadata_proxy_shared_secret secretabc
      notify: restart compute service


    - name: create symbolic link for plugin.ini
      shell: ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini
      ignore_errors: true

    - name: execute to polulate db
      become: yes
      become_user: neutron
      command: neutron-db-manage --config-file /etc/neutron/neutron.conf  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head

    - name: start and enable neutron server
      service: name=neutron-server state=started enabled=yes

  handlers:
    - name: restart compute service
      service: name=openstack-nova-api state=restarted

    - name: restart neutron service
      service: name=neutron-server state=restarted

- hosts: openstack-mitaka-network
  name: neutron installation and configuration on network node
  user: root
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: install neutron packages
      yum: name={{ item }} state=present
      with_items:
        - openstack-neutron
        - openstack-neutron-ml2
        - openstack-neutron-linuxbridge
        - ebtables

    - name: config neutron.conf
      shell: |
        openstack-config --set /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:password@{{ controller_hostname }}/neutron
        openstack-config --set /etc/neutron/neutron.conf DEFAULT core_plugin ml2
        openstack-config --set /etc/neutron/neutron.conf DEFAULT service_plugins router
        openstack-config --set /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips True
        openstack-config --set /etc/neutron/neutron.conf DEFAULT rpc_backend rabbit
        openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_host {{ controller_hostname }}
        openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/neutron/neutron.conf oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_uri http://{{ controller_hostname }}:5000
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken memcached_servers {{ controller_hostname }}:11211
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken auth_type password
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken project_name service
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken username neutron
        openstack-config --set /etc/neutron/neutron.conf keystone_authtoken password password
        openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes True
        openstack-config --set /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes True
        openstack-config --set /etc/neutron/neutron.conf nova auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/neutron/neutron.conf nova auth_type password
        openstack-config --set /etc/neutron/neutron.conf nova project_domain_name default
        openstack-config --set /etc/neutron/neutron.conf nova user_domain_name default
        openstack-config --set /etc/neutron/neutron.conf nova region_name RegionOne
        openstack-config --set /etc/neutron/neutron.conf nova project_name service
        openstack-config --set /etc/neutron/neutron.conf nova username nova
        openstack-config --set /etc/neutron/neutron.conf nova password password
        openstack-config --set /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp
      notify: restart neutron services


    - name: config ml2_conf.ini
      shell: |
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan,vxlan
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types vxlan
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers linuxbridge,l2population
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vxlan vni_ranges 1:1000
        openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset True
      notify: restart neutron services

    - name: config linuxbridge_agent.ini
      shell: |
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:eno50336512
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan True
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip {{ ansible_eno33557248.ipv4.address }}
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population True
      notify: restart neutron services


    - name: config l3_agent.ini
      shell: |
        openstack-config --set /etc/neutron/l3_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
        openstack-config --set /etc/neutron/l3_agent.ini DEFAULT external_network_bridge ""
      notify: restart neutron services

    - name: config dhcp_agent.ini
      shell: |
        openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT interface_driver neutron.agent.linux.interface.BridgeInterfaceDriver
        openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT dhcp_driver neutron.agent.linux.dhcp.Dnsmasq
        openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT enable_isolated_metadata True
      notify: restart neutron services

    - name: config metadata_agent.ini
      shell: |
        openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_ip {{ inventory_hostname }} 
        openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT metadata_proxy_shared_secret secretabc
      notify: restart neutron services
       

    - name: create symbolic link for plugin.ini
      shell: ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini
      ignore_errors : true
 
    - name: start and enable neutron services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - neutron-linuxbridge-agent
        - neutron-dhcp-agent
        - neutron-metadata-agent
        - neutron-l3-agent

  handlers:
   - name: restart neutron services
     service: name={{ item }} state=restarted
     with_items:
        - neutron-linuxbridge-agent
        - neutron-dhcp-agent
        - neutron-metadata-agent
        - neutron-l3-agent

- hosts: openstack-mitaka-compute
  name: neutron installation andconfiguration on compute node
  user: root
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: install neutron packages
      yum: name={{ item }} state=present
      with_items:
        - openstack-neutron-linuxbridge
        - ebtables

    - name: config neutron.conf
      shell: |
        openstack-config --set /etc/neutron/neutron.cof DEFAULT rpc_backend rabbit
        openstack-config --set /etc/neutron/neutron.cof oslo_messaging_rabbit rabbit_host {{ controller_hostname }}
        openstack-config --set /etc/neutron/neutron.cof oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/neutron/neutron.cof oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/neutron/neutron.cof DEFAULT auth_strategy keystone
        openstack-config --set /etc/neutron/neutron.cof DEFAULT auth_uri http://{{ controller_hostname }}:5000
        openstack-config --set /etc/neutron/neutron.cof DEFAULT auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/neutron/neutron.cof DEFAULT memcached_servers {{ controller_hostname }}:11211
        openstack-config --set /etc/neutron/neutron.cof DEFAULT auth_type password
        openstack-config --set /etc/neutron/neutron.cof DEFAULT project_domain_name default
        openstack-config --set /etc/neutron/neutron.cof DEFAULT user_domain_name default
        openstack-config --set /etc/neutron/neutron.cof DEFAULT project_name service
        openstack-config --set /etc/neutron/neutron.cof DEFAULT username neutron
        openstack-config --set /etc/neutron/neutron.cof DEFAULT password password
        openstack-config --set /etc/neutron/neutron.cof oslo_concurrency lock_path /var/lib/neutron/tmp
      notify: restart neutron service

    - name: config linuxbridge_agent.ini
      shell: |
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini linux_bridge physical_interface_mappings provider:eno50336512
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan enable_vxlan True
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan local_ip {{ ansible_eno33557248.ipv4.address }}
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini vxlan l2_population True
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup enable_security_group True
        openstack-config --set /etc/neutron/plugins/ml2/linuxbridge_agent.ini securitygroup firewall_driver neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
      notify: restart neutron service

    - name: config nova.conf
      shell: |
        openstack-config --set /etc/nova/nova.conf neutron url http://{{ controller_hostname }}:9696
        openstack-config --set /etc/nova/nova.conf neutron auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/nova/nova.conf neutron auth_type password
        openstack-config --set /etc/nova/nova.conf neutron project_domain_name default
        openstack-config --set /etc/nova/nova.conf neutron user_domain_name default
        openstack-config --set /etc/nova/nova.conf neutron region_name RegionOne
        openstack-config --set /etc/nova/nova.conf neutron project_name service
        openstack-config --set /etc/nova/nova.conf neutron username neutron
        openstack-config --set /etc/nova/nova.conf neutron password password
      notify: restart compute service

    - name: start and enable neutron service
      service: name=neutron-linuxbridge-agent state=started enabled=true

  handlers:
    - name: restart compute service
      service: name=openstack-nova-compute state=restarted

    - name: restart neutron service
      service: name=neutron-linuxbridge-agent state=restarted

- hosts: openstack-mitaka-controller
  name: horizon installation and configuration
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: install openstack-dashboard
      yum: name=openstack-dashboard state=present

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings regexp="^OPENSTACK_HOST =" line="OPENSTACK_HOST = \"{{ controller_hostname }}\""
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings regexp="^ALLOWED_HOSTS =" line="ALLOWED_HOSTS = ['*', ]"
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings insertbefore="^CACHES =" regexp="^SESSION_ENGINE =" line="SESSION_ENGINE = 'django.contrib.sessions.backends.cache'"
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings insertafter="^    'default':" regexp="^        'BACKEND':" line="        'BACKEND':'django.core.cache.backends.memcached.MemcachedCache',"
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings insertafter="^        'BACKEND':" line="        'LOCATION':'{{ controller_hostname }}:11211',"
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings regexp="^OPENSTACK_KEYSTONE_URL =" line="OPENSTACK_KEYSTONE_URL = \"http://%s:5000/v3\" % OPENSTACK_HOST"
      notify: restart services

    - name: config local_settings
      blockinfile:
        dest: /etc/openstack-dashboard/local_settings
        content: |
          OPENSTACK_API_VERSIONS = {
              "identity": 3,
              "image": 2,
              "volume": 2,
          }
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings regexp="^OPENSTACK_KEYSTONE_DEFAULT_DOMAIN =" line="OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = \"default\""
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings regexp="^OPENSTACK_KEYSTONE_DEFAULT_ROLE =" line="OPENSTACK_KEYSTONE_DEFAULT_ROLE = \"user\""
      notify: restart services

    - name: config local_settings
      lineinfile: dest=/etc/openstack-dashboard/local_settings regexp="^TIME_ZONE =" line="TIME_ZONE = \"Asia/Tokyo\"" 
      notify: restart services

  handlers:
    - name: restart services
      service: name={{ item }} state=restarted
      with_items:
        - httpd
        - memcached

- hosts: openstack-mitaka-controller
  name: cinder installation and configuration on controller node
  user: root
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: create cinder db
      mysql_db: name=cinder state=present

    - name: copy sql file
      copy: src=/root/work/template/cinder.sql dest=/tmp/cinder.sql mode=755

    - name: execute sql for cinder db
      mysql_db: name=cinder state=import target=/tmp/cinder.sql

    - name: check if cinder user exists or not
      shell: . /root/admin-openrc && openstack user list | grep cinder | awk '{print $4}'
      register: openstack_user_list
      ignore_errors: true

    - name: create cinder user
      shell: . /root/admin-openrc && openstack user create --domain default cinder --password password
      when: openstack_user_list.stdout_lines.count("cinder") < 1

    - name: add admin role to the cinder user and service project
      shell: . /root/admin-openrc && openstack role add --project service --user cinder admin

    - name: check block storage service is registered or not
      shell: . /root/admin-openrc && openstack service list | grep cinder | awk '{print $6}'
      register: openstack_service_list
      ignore_errors: true

    - name: create block storage service
      shell: . /root/admin-openrc && openstack service create --name cinder --description "OpenStack Block Storage" volume
      when: openstack_service_list.stdout_lines.count("volume") < 1

    - name: check block storage service (v2) is registered or not
      shell: . /root/admin-openrc && openstack service list | grep cinderv2 | awk '{print $6}'
      register: openstack_service_list
      ignore_errors: true

    - name: create block storage service (v2)
      shell: . /root/admin-openrc && openstack service create --name cinderv2 --description "OpenStack Block Storage" volumev2
      when: openstack_service_list.stdout_lines.count("volumev2") < 1

    - name: check volume endpoint extsts or not
      shell: . /root/admin-openrc && openstack endpoint list | grep volume | awk '{print $12}'
      register: openstack_endpoint_list
      ignore_errors: true

    - name: execute openstack endpoint create volume public
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne volume public http://{{ inventory_hostname }}:8776/v1/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("public") < 1

    - name: execute openstack endpoint create volume internal
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne volume internal http://{{ inventory_hostname }}:8776/v1/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("internal") < 1

    - name: execute openstack endpoint create volume admin
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne volume admin http://{{ inventory_hostname }}:8776/v1/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("admin") < 1

    - name: check volumev2 endpoint extsts or not
      shell: . /root/admin-openrc && openstack endpoint list | grep volumev2 | awk '{print $12}'
      register: openstack_endpoint_list
      ignore_errors: true

    - name: execute openstack endpoint create volumev2 public
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne volumev2 public http://{{ inventory_hostname }}:8776/v2/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("public") < 1

    - name: execute openstack endpoint create volumev2 internal
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne volumev2 internal http://{{ inventory_hostname }}:8776/v2/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("internal") < 1

    - name: execute openstack endpoint create volumev2 admin
      shell: . /root/admin-openrc && openstack endpoint create --region RegionOne volumev2 admin http://{{ inventory_hostname }}:8776/v2/%\(tenant_id\)s
      when: openstack_endpoint_list.stdout_lines.count("admin") < 1

    - name: install cinder packages
      yum: name={{ item }} state=present
      with_items:
        - openstack-cinder

    - name: config cinder.conf
      shell: |
        openstack-config --set /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:password@localhost/cinder
        openstack-config --set /etc/cinder/cinder.conf DEFAULT rpc_backend rabbit
        openstack-config --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_host {{ inventory_hostname }}
        openstack-config --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystone
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_uri http://{{ inventory_hostname }}:5000
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_url http://{{ inventory_hostname }}:35357
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken memcached_servers {{ inventory_hostname }}:11211
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_type password
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_name service
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken username cinder
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken password password
        openstack-config --set /etc/cinder/cinder.conf DEFAULT my_ip {{ ansible_eno16777984.ipv4.address }}
        openstack-config --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp
      notify: restart openstack-cinder services

    - name: populate the block service database
      become: yes
      become_user: cinder
      command: cinder-manage db sync

    - name: config nova.conf
      shell: |
        openstack-config --set /etc/nova/nova.conf cinder os_region_name RegionOne
      notify: restart openstack-nova-api service

    - name: start and enable openstack cinder services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - openstack-cinder-api
        - openstack-cinder-scheduler

  handlers:
    - name: restart openstack-nova-api service
      service: name={{ item }} state=restarted
      with_items:
        - openstack-nova-api

    - name: restart openstack-cinder services
      service: name={{ item }} state=restarted
      with_items:
        - openstack-cinder-api
        - openstack-cinder-scheduler

- hosts: openstack-mitaka-block
  name: cinder installtion and configuration on block storage node
  user: root
  vars_files:
    - vars/openstack.yml
  tasks:
    - name: install lvm2 package
      yum: name=lvm2

    - name: start and enable lvm services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - lvm2-lvmetad

    - name: pvdisplay
      command: pvdisplay /dev/sdb
      register: result
      ignore_errors: true

    - name: pvcreate
      command: pvcreate /dev/sdb
      when: result | failed

    - name: vgcreate
      lvg: vg="cinder-volumes" pvs="/dev/sdb" state=present

    - name: config lvm.conf
      lineinfile: dest=/etc/lvm/lvm.conf insertafter="^devices {" line="filter = [ \"a/sda/\", \"a/sdb/\", \"r/.*/\"]"

    - name: install cinder packages
      yum: name={{ item }} state=present
      with_items:
        - openstack-cinder
        - python-keystonemiddleware
        - targetcli

    - name: config cinder.conf
      shell: |
        openstack-config --set /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:password@{{ controller_hostname }}/cinder
        openstack-config --set /etc/cinder/cinder.conf DEFAULT rpc_backend rabbit
        openstack-config --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_host {{ controller_hostname }}
        openstack-config --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_userid openstack
        openstack-config --set /etc/cinder/cinder.conf oslo_messaging_rabbit rabbit_password password
        openstack-config --set /etc/cinder/cinder.conf DEFAULT auth_strategy keystone
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_uri http://{{ controller_hostname }}:5000
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_url http://{{ controller_hostname }}:35357
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken memcached_servers {{ controller_hostname }}:11211
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken auth_type password
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_domain_name default
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken user_domain_name default
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken project_name service
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken username cinder
        openstack-config --set /etc/cinder/cinder.conf keystone_authtoken password password
        openstack-config --set /etc/cinder/cinder.conf DEFAULT my_ip {{ ansible_eno16777984.ipv4.address }}
        openstack-config --set /etc/cinder/cinder.conf lvm volume_driver cinder.volume.drivers.lvm.LVMVolumeDriver
        openstack-config --set /etc/cinder/cinder.conf lvm volume_group cinder-volumes
        openstack-config --set /etc/cinder/cinder.conf lvm iscsi_protocol iscsi
        openstack-config --set /etc/cinder/cinder.conf lvm iscsi_helper lioadm
        openstack-config --set /etc/cinder/cinder.conf DEFAULT enabled_backends lvm
        openstack-config --set /etc/cinder/cinder.conf DEFAULT glance_api_servers http://{{ controller_hostname }}:9292
        openstack-config --set /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp
      notify: restart openstack-cinder services

    - name: start and enable openstack cinder services
      service: name={{ item }} state=started enabled=yes
      with_items:
        - openstack-cinder-volume
        - target

  handlers:
    - name: restart openstack-cinder services
      service: name={{ item }} state=restarted
      with_items:
        - openstack-cinder-volume
        - target


